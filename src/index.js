function withCORS(res){const h=new Headers(res.headers);h.set("Access-Control-Allow-Origin","*");h.set("Access-Control-Allow-Methods","GET,POST,OPTIONS");h.set("Access-Control-Allow-Headers","Content-Type, Authorization");return new Response(res.body,{status:res.status,headers:h})}
function ok(text="OK"){return withCORS(new Response(text,{status:200}))}
function notFound(){return withCORS(new Response("Not found",{status:404}))}
function json(obj,status=200){return withCORS(new Response(JSON.stringify(obj),{status,headers:{"content-type":"application/json"}}))}
export default{async fetch(req,env,ctx){const url=new URL(req.url);if(req.method==="OPTIONS")return withCORS(new Response(null,{status:204}));if(url.pathname==="/create-room"&&req.method==="POST"){const room=genRoomCode();const id=env.ROOM.idFromName(room);const obj=env.ROOM.get(id);await obj.fetch("https://do/init",{method:"POST",body:JSON.stringify({room})});return json({room})}if(url.pathname==="/"||url.pathname==="/health")return ok("OK");const isWS=req.headers.get("Upgrade")==="websocket";if((url.pathname==="/ws"||url.searchParams.get("room"))&&isWS)return this.upgradeWS(req,env);return notFound()},upgradeWS(req,env){const url=new URL(req.url);const room=(url.searchParams.get("room")||"").toUpperCase().trim();const name=(url.searchParams.get("name")||"Guest").slice(0,16);if(!room)return withCORS(new Response("room required",{status:400}));const id=env.ROOM.idFromName(room);const obj=env.ROOM.get(id);const headers=new Headers(req.headers);headers.set("x-name",name);const forwarded=new Request(req,{headers});return obj.fetch(forwarded)}};
function genRoomCode(){const chars="ABCDEFGHJKLMNPQRSTUVWXYZ23456789";let s="";for(let i=0;i<4;i++)s+=chars[Math.floor(Math.random()*chars.length)];return s}
export class Room{constructor(state,env){this.state=state;this.env=env;this.clients=new Map();this.room="----";this.match=null;this.pingTimer=null;this.hostId=null}async fetch(req){const url=new URL(req.url);try{if(req.method==="OPTIONS")return withCORS(new Response(null,{status:204}));if(url.hostname==="do"&&url.pathname==="/init"&&req.method==="POST"){const j=await req.json();this.room=j.room;return json({room:this.room})}if(req.headers.get("Upgrade")==="websocket"){const name=req.headers.get("x-name")||"Guest";const pair=new WebSocketPair();const client=pair[0],server=pair[1];server.accept();const id=crypto.randomUUID();this.clients.set(id,{ws:server,name,progress:0,time:0,finished:false,ready:false});if(!this.hostId)this.hostId=id;this.ensureHeartbeat();this.send(id,{type:"hello",id,room:this.room,players:this.playerList(),hostId:this.hostId});this.broadcast({type:"players",players:this.playerList(),hostId:this.hostId});if(this.match&&this.match.active){this.send(id,{type:"start",puzzles:this.match.puzzles})}server.addEventListener("message",(ev)=>{try{const msg=JSON.parse(ev.data);if(msg.type==="start")this.onStart(id);else if(msg.type==="next")this.onNext(id);else if(msg.type==="submit")this.onSubmit(id,msg);else if(msg.type==="ready")this.onReady(id,!!msg.v);else if(msg.type==="reset")this.onReset(id)}catch(e){}});server.addEventListener("close",async(ev)=>{this.clients.delete(id);if(this.hostId===id){const first=Array.from(this.clients.keys())[0]||null;this.hostId=first}if(this.clients.size===0){this.maybeStopHeartbeat();try{await this.state.storage.deleteAll();this.match=null;this.hostId=null}catch(e){}}this.broadcast({type:"players",players:this.playerList(),hostId:this.hostId})});return new Response(null,{status:101,webSocket:client})}return ok("OK Room "+this.room)}catch(e){return new Response("Internal Error",{status:1011})}}ensureHeartbeat(){if(this.pingTimer)return;this.pingTimer=setInterval(()=>{const s=JSON.stringify({type:"ping",t:Date.now()});for(const v of this.clients.values()){try{v.ws.send(s)}catch(e){}}},30000)}maybeStopHeartbeat(){if(this.clients.size===0&&this.pingTimer){clearInterval(this.pingTimer);this.pingTimer=null}}playerList(){return Array.from(this.clients.entries()).map(([id,v])=>({id,name:v.name,progress:v.progress,time:v.time,finished:v.finished,ready:v.ready,host:id===this.hostId}))}send(id,obj){const v=this.clients.get(id);if(!v)return;try{v.ws.send(JSON.stringify(obj))}catch(e){}}broadcast(obj){const s=JSON.stringify(obj);for(const v of this.clients.values()){try{v.ws.send(s)}catch(e){}}}
onStart(id){if(this.hostId!==id)return;if(this.match&&this.match.active)return;const puzzles=[];for(let i=0;i<10;i++){const p=S24.gen();puzzles.push({nums:p.nums,par:p.par})}for(const v of this.clients.values()){v.progress=0;v.time=0;v.finished=false;v.ready=false}this.match={active:true,puzzles};this.broadcast({type:"start",puzzles})}
onNext(id){if(!this.match||!this.match.active)return;const v=this.clients.get(id);if(!v||v.finished)return;const nextQn=v.progress+1;if(nextQn<1||nextQn>10)return;const q=this.match.puzzles[nextQn-1];this.send(id,{type:"question",qn:nextQn,nums:q.nums,par:q.par})}
onSubmit(id,msg){if(!this.match||!this.match.active)return;const v=this.clients.get(id);if(!v||v.finished)return;const qn=msg.qn|0;if(qn!==v.progress+1){this.send(id,{type:"verdict",qn,ok:false,par:0,time:0,reason:"题号不匹配"});return}if(qn<1||qn>10)return;const q=this.match.puzzles[qn-1];const expr=(msg.expr||"").toString();const ok=this.checkExpr(expr,q.nums);const t=Math.max(0,Number(msg.time)||0);if(ok){v.time+=t;v.progress=qn;if(v.progress>=10)v.finished=true;this.send(id,{type:"verdict",qn,ok:true,par:q.par,time:t})}else{this.send(id,{type:"verdict",qn,ok:false,par:q.par,time:t,reason:"错误"})}this.broadcast({type:"players",players:this.playerList(),hostId:this.hostId});this.checkEnd()}
onReady(id,vote){if(!this.match||!this.match.active)return;const v=this.clients.get(id);if(!v||!v.finished)return;v.ready=!!vote;this.broadcast({type:"players",players:this.playerList(),hostId:this.hostId})}
onReset(id){if(this.hostId!==id)return;if(!this.match||!this.match.active)return;if(!this.allFinished())return;if(!this.allReady())return;for(const v of this.clients.values()){v.progress=0;v.time=0;v.finished=false;v.ready=false}this.match=null;this.broadcast({type:"reset"});this.broadcast({type:"players",players:this.playerList(),hostId:this.hostId})}
allFinished(){if(this.clients.size===0)return false;for(const v of this.clients.values()){if(!v.finished)return false}return true}
allReady(){if(this.clients.size===0)return false;for(const v of this.clients.values()){if(!v.ready)return false}return true}
checkEnd(){if(!this.allFinished())return;const ranking=this.playerList().slice().sort((a,b)=>(a.time-b.time)||a.name.localeCompare(b.name)).map((p,i)=>`${i+1}.${p.name}（总时 ${p.time.toFixed(1)}s）`);this.broadcast({type:"end",ranking})}
checkExpr(expr,nums){const clean=expr.replace(/\s+/g,"").replace(/×/g,"*").replace(/÷/g,"/");if(!/^[\d+\-*/()]+$/.test(clean))return false;const tokens=(clean.match(/\d+/g)||[]).map(x=>String(Number(x)));const pool=nums.slice().map(String);for(const d of tokens){const idx=pool.indexOf(d);if(idx===-1)return false;pool.splice(idx,1)}if(pool.length>0)return false;try{const v=Function(`"use strict";return(${clean})`)();if(!isFinite(v))return false;return Math.abs(v-24)<1e-6}catch(e){return false}}
}
const OPS2=[{sym:"+",f:(a,b)=>a+b},{sym:"-",f:(a,b)=>a-b},{sym:"*",f:(a,b)=>a*b},{sym:"/",f:(a,b)=>b===0?null:a/b}];function approx(x,y){return Math.abs(x-y)<1e-6}function*pairs(n){for(let i=0;i<n;i++)for(let j=i+1;j<n;j++)yield[i,j]}function comb(a,b){const r=[];for(const op of OPS2){const v1=op.f(a,b);if(v1!==null)r.push(v1);if(op.sym==="-"||op.sym==="/"){const v2=op.f(b,a);if(v2!==null)r.push(v2)}}return r}function solve(list){if(list.length===1)return approx(list[0],24);for(const[i,j]of pairs(list.length)){const rest=list.filter((_,k)=>k!==i&&k!==j);for(const c of comb(list[i],list[j])){if(solve([...rest,c]))return true}}return false}function rnd(a,b){return Math.floor(Math.random()*(b-a+1))+a}function parFromExp(exp){const base=Math.log2(Math.max(4,exp))*3+4;return Math.max(6,Math.min(45,Math.round(base)))}const S24={gen(){let tries=0;while(tries++<300){const nums=[rnd(1,13),rnd(1,13),rnd(1,13),rnd(1,13)];if(solve(nums)){let exp=0;(function dfs(list){exp++;if(list.length===1)return;const idxA=Math.floor(Math.random()*list.length);let idxB=idxA;while(idxB===idxA)idxB=Math.floor(Math.random()*list.length);const a=list[idxA],b=list[idxB];const rest=list.filter((_,k)=>k!==idxA&&k!==idxB);for(const c of comb(a,b)){dfs([...rest,c]);return}})(nums);return{nums,par:parFromExp(Math.max(30,exp))}}}return{nums:[1,5,5,5],par:12}}};
